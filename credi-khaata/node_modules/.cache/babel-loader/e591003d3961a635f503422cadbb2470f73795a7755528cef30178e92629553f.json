{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gowth\\\\Downloads\\\\Networth_assignment\\\\credi-khaata\\\\src\\\\context\\\\DataContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useReducer, useContext } from 'react';\nimport { toast } from 'react-toastify';\nimport { mockCustomers, mockTransactions } from '../data/mockData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/createContext();\nexport const useData = () => {\n  _s();\n  return useContext(DataContext);\n};\n\n// Action types\n_s(useData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst ADD_CUSTOMER = 'ADD_CUSTOMER';\nconst ADD_LOAN = 'ADD_LOAN';\nconst ADD_REPAYMENT = 'ADD_REPAYMENT';\n\n// Initial state\nconst initialState = {\n  customers: mockCustomers,\n  transactions: mockTransactions\n};\n\n// Reducer function\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case ADD_CUSTOMER:\n      return {\n        ...state,\n        customers: [...state.customers, action.payload]\n      };\n    case ADD_LOAN:\n      return {\n        ...state,\n        transactions: [...state.transactions, action.payload]\n      };\n    case ADD_REPAYMENT:\n      return {\n        ...state,\n        transactions: state.transactions.map(transaction => transaction.id === action.payload.transactionId ? {\n          ...transaction,\n          repayments: [...(transaction.repayments || []), action.payload.repayment],\n          remainingAmount: transaction.remainingAmount - action.payload.repayment.amount\n        } : transaction)\n      };\n    default:\n      return state;\n  }\n};\nexport const DataProvider = ({\n  children\n}) => {\n  _s2();\n  const [state, dispatch] = useReducer(dataReducer, initialState);\n\n  // Add a new customer\n  const addCustomer = customer => {\n    const newCustomer = {\n      id: `customer-${Date.now()}`,\n      ...customer,\n      createdAt: new Date().toISOString()\n    };\n    dispatch({\n      type: ADD_CUSTOMER,\n      payload: newCustomer\n    });\n    toast.success(`Customer ${newCustomer.name} added successfully!`);\n    return newCustomer;\n  };\n\n  // Add a new loan\n  const addLoan = loan => {\n    const newLoan = {\n      id: `transaction-${Date.now()}`,\n      ...loan,\n      createdAt: new Date().toISOString(),\n      repayments: [],\n      remainingAmount: loan.amount\n    };\n    dispatch({\n      type: ADD_LOAN,\n      payload: newLoan\n    });\n    toast.success(`Loan added successfully!`);\n    return newLoan;\n  };\n\n  // Add a repayment to a loan\n  const addRepayment = (transactionId, repayment) => {\n    const transaction = state.transactions.find(t => t.id === transactionId);\n    if (!transaction) {\n      toast.error('Transaction not found');\n      return;\n    }\n    if (repayment.amount > transaction.remainingAmount) {\n      toast.error('Repayment amount cannot exceed remaining balance');\n      return;\n    }\n    const newRepayment = {\n      id: `repayment-${Date.now()}`,\n      ...repayment,\n      date: repayment.date || new Date().toISOString()\n    };\n    dispatch({\n      type: ADD_REPAYMENT,\n      payload: {\n        transactionId,\n        repayment: newRepayment\n      }\n    });\n    toast.success('Repayment recorded successfully!');\n  };\n\n  // Get all customers\n  const getCustomers = () => {\n    return state.customers;\n  };\n\n  // Get a specific customer by ID\n  const getCustomerById = id => {\n    return state.customers.find(customer => customer.id === id);\n  };\n\n  // Get all transactions for a specific customer\n  const getTransactionsByCustomerId = customerId => {\n    return state.transactions.filter(transaction => transaction.customerId === customerId);\n  };\n\n  // Calculate total outstanding balance for a customer\n  const calculateOutstandingBalance = customerId => {\n    const customerTransactions = getTransactionsByCustomerId(customerId);\n    return customerTransactions.reduce((total, transaction) => total + transaction.remainingAmount, 0);\n  };\n\n  // Calculate the next due date for a customer\n  const calculateNextDueDate = customerId => {\n    const customerTransactions = getTransactionsByCustomerId(customerId);\n    const dueDates = customerTransactions.filter(transaction => transaction.remainingAmount > 0).map(transaction => new Date(transaction.dueDate));\n    if (dueDates.length === 0) return null;\n    return new Date(Math.min(...dueDates));\n  };\n\n  // Check if a customer has overdue loans\n  const hasOverdueLoans = customerId => {\n    const customerTransactions = getTransactionsByCustomerId(customerId);\n    const today = new Date();\n    return customerTransactions.some(transaction => transaction.remainingAmount > 0 && new Date(transaction.dueDate) < today);\n  };\n  const value = {\n    customers: state.customers,\n    transactions: state.transactions,\n    addCustomer,\n    addLoan,\n    addRepayment,\n    getCustomers,\n    getCustomerById,\n    getTransactionsByCustomerId,\n    calculateOutstandingBalance,\n    calculateNextDueDate,\n    hasOverdueLoans\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n_s2(DataProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = DataProvider;\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useContext","toast","mockCustomers","mockTransactions","jsxDEV","_jsxDEV","DataContext","useData","_s","ADD_CUSTOMER","ADD_LOAN","ADD_REPAYMENT","initialState","customers","transactions","dataReducer","state","action","type","payload","map","transaction","id","transactionId","repayments","repayment","remainingAmount","amount","DataProvider","children","_s2","dispatch","addCustomer","customer","newCustomer","Date","now","createdAt","toISOString","success","name","addLoan","loan","newLoan","addRepayment","find","t","error","newRepayment","date","getCustomers","getCustomerById","getTransactionsByCustomerId","customerId","filter","calculateOutstandingBalance","customerTransactions","reduce","total","calculateNextDueDate","dueDates","dueDate","length","Math","min","hasOverdueLoans","today","some","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gowth/Downloads/Networth_assignment/credi-khaata/src/context/DataContext.jsx"],"sourcesContent":["import React, { createContext, useReducer, useContext } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { mockCustomers, mockTransactions } from '../data/mockData';\r\n\r\nconst DataContext = createContext();\r\n\r\nexport const useData = () => useContext(DataContext);\r\n\r\n// Action types\r\nconst ADD_CUSTOMER = 'ADD_CUSTOMER';\r\nconst ADD_LOAN = 'ADD_LOAN';\r\nconst ADD_REPAYMENT = 'ADD_REPAYMENT';\r\n\r\n// Initial state\r\nconst initialState = {\r\n  customers: mockCustomers,\r\n  transactions: mockTransactions,\r\n};\r\n\r\n// Reducer function\r\nconst dataReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case ADD_CUSTOMER:\r\n      return {\r\n        ...state,\r\n        customers: [...state.customers, action.payload],\r\n      };\r\n    case ADD_LOAN:\r\n      return {\r\n        ...state,\r\n        transactions: [...state.transactions, action.payload],\r\n      };\r\n    case ADD_REPAYMENT:\r\n      return {\r\n        ...state,\r\n        transactions: state.transactions.map(transaction =>\r\n          transaction.id === action.payload.transactionId\r\n            ? {\r\n                ...transaction,\r\n                repayments: [...(transaction.repayments || []), action.payload.repayment],\r\n                remainingAmount: transaction.remainingAmount - action.payload.repayment.amount,\r\n              }\r\n            : transaction\r\n        ),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const DataProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(dataReducer, initialState);\r\n\r\n  // Add a new customer\r\n  const addCustomer = (customer) => {\r\n    const newCustomer = {\r\n      id: `customer-${Date.now()}`,\r\n      ...customer,\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n    \r\n    dispatch({ type: ADD_CUSTOMER, payload: newCustomer });\r\n    toast.success(`Customer ${newCustomer.name} added successfully!`);\r\n    return newCustomer;\r\n  };\r\n\r\n  // Add a new loan\r\n  const addLoan = (loan) => {\r\n    const newLoan = {\r\n      id: `transaction-${Date.now()}`,\r\n      ...loan,\r\n      createdAt: new Date().toISOString(),\r\n      repayments: [],\r\n      remainingAmount: loan.amount,\r\n    };\r\n    \r\n    dispatch({ type: ADD_LOAN, payload: newLoan });\r\n    toast.success(`Loan added successfully!`);\r\n    return newLoan;\r\n  };\r\n\r\n  // Add a repayment to a loan\r\n  const addRepayment = (transactionId, repayment) => {\r\n    const transaction = state.transactions.find(t => t.id === transactionId);\r\n    \r\n    if (!transaction) {\r\n      toast.error('Transaction not found');\r\n      return;\r\n    }\r\n    \r\n    if (repayment.amount > transaction.remainingAmount) {\r\n      toast.error('Repayment amount cannot exceed remaining balance');\r\n      return;\r\n    }\r\n    \r\n    const newRepayment = {\r\n      id: `repayment-${Date.now()}`,\r\n      ...repayment,\r\n      date: repayment.date || new Date().toISOString(),\r\n    };\r\n    \r\n    dispatch({\r\n      type: ADD_REPAYMENT,\r\n      payload: { transactionId, repayment: newRepayment },\r\n    });\r\n    \r\n    toast.success('Repayment recorded successfully!');\r\n  };\r\n\r\n  // Get all customers\r\n  const getCustomers = () => {\r\n    return state.customers;\r\n  };\r\n\r\n  // Get a specific customer by ID\r\n  const getCustomerById = (id) => {\r\n    return state.customers.find(customer => customer.id === id);\r\n  };\r\n\r\n  // Get all transactions for a specific customer\r\n  const getTransactionsByCustomerId = (customerId) => {\r\n    return state.transactions.filter(transaction => transaction.customerId === customerId);\r\n  };\r\n\r\n  // Calculate total outstanding balance for a customer\r\n  const calculateOutstandingBalance = (customerId) => {\r\n    const customerTransactions = getTransactionsByCustomerId(customerId);\r\n    return customerTransactions.reduce((total, transaction) => total + transaction.remainingAmount, 0);\r\n  };\r\n\r\n  // Calculate the next due date for a customer\r\n  const calculateNextDueDate = (customerId) => {\r\n    const customerTransactions = getTransactionsByCustomerId(customerId);\r\n    const dueDates = customerTransactions\r\n      .filter(transaction => transaction.remainingAmount > 0)\r\n      .map(transaction => new Date(transaction.dueDate));\r\n    \r\n    if (dueDates.length === 0) return null;\r\n    \r\n    return new Date(Math.min(...dueDates));\r\n  };\r\n\r\n  // Check if a customer has overdue loans\r\n  const hasOverdueLoans = (customerId) => {\r\n    const customerTransactions = getTransactionsByCustomerId(customerId);\r\n    const today = new Date();\r\n    \r\n    return customerTransactions.some(transaction => \r\n      transaction.remainingAmount > 0 && new Date(transaction.dueDate) < today\r\n    );\r\n  };\r\n\r\n  const value = {\r\n    customers: state.customers,\r\n    transactions: state.transactions,\r\n    addCustomer,\r\n    addLoan,\r\n    addRepayment,\r\n    getCustomers,\r\n    getCustomerById,\r\n    getTransactionsByCustomerId,\r\n    calculateOutstandingBalance,\r\n    calculateNextDueDate,\r\n    hasOverdueLoans,\r\n  };\r\n\r\n  return (\r\n    <DataContext.Provider value={value}>\r\n      {children}\r\n    </DataContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}