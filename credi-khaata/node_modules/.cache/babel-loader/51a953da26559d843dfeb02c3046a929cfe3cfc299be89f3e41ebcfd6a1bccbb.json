{"ast":null,"code":"import jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nexport const generateCustomerStatement = (customer, transactions) => {\n  // Create a new PDF document\n  const doc = new jsPDF();\n\n  // Add title\n  doc.setFontSize(20);\n  doc.text(`${customer.name} - Statement`, 14, 22);\n\n  // Add customer details\n  doc.setFontSize(12);\n  doc.text(`Phone: ${customer.phone}`, 14, 32);\n  doc.text(`Address: ${customer.address}`, 14, 38);\n  doc.text(`Email: ${customer.email}`, 14, 44);\n  doc.text(`Date: ${new Date().toLocaleDateString()}`, 14, 50);\n\n  // Calculate total due\n  const totalDue = transactions.reduce((sum, t) => sum + t.remainingAmount, 0);\n  doc.setFont(undefined, 'bold');\n  doc.text(`Total Outstanding: ₹${totalDue.toFixed(2)}`, 14, 60);\n  doc.setFont(undefined, 'normal');\n\n  // Add transactions table\n  const tableColumn = [\"Date\", \"Item\", \"Amount\", \"Due Date\", \"Paid\", \"Remaining\"];\n  const tableRows = transactions.map(transaction => {\n    const paidAmount = transaction.amount - transaction.remainingAmount;\n    return [new Date(transaction.createdAt).toLocaleDateString(), transaction.item, `₹${transaction.amount.toFixed(2)}`, new Date(transaction.dueDate).toLocaleDateString(), `₹${paidAmount.toFixed(2)}`, `₹${transaction.remainingAmount.toFixed(2)}`];\n  });\n  doc.autoTable({\n    startY: 70,\n    head: [tableColumn],\n    body: tableRows,\n    theme: 'striped',\n    headStyles: {\n      fillColor: [41, 128, 185],\n      textColor: 255\n    },\n    foot: [['', '', '', 'Total', `₹${totalDue.toFixed(2)}`]]\n  });\n\n  // Add repayments table if there are any\n  const hasRepayments = transactions.some(t => t.repayments && t.repayments.length > 0);\n  if (hasRepayments) {\n    doc.addPage();\n    doc.setFontSize(16);\n    doc.text(`${customer.name} - Repayment History`, 14, 20);\n    let yPos = 30;\n    transactions.forEach(transaction => {\n      if (transaction.repayments && transaction.repayments.length > 0) {\n        doc.setFontSize(14);\n        doc.text(`Item: ${transaction.item} (₹${transaction.amount.toFixed(2)})`, 14, yPos);\n        yPos += 10;\n        const repaymentColumn = [\"Date\", \"Amount\"];\n        const repaymentRows = transaction.repayments.map(repayment => [new Date(repayment.date).toLocaleDateString(), `₹${repayment.amount.toFixed(2)}`]);\n        doc.autoTable({\n          startY: yPos,\n          head: [repaymentColumn],\n          body: repaymentRows,\n          theme: 'grid',\n          headStyles: {\n            fillColor: [46, 204, 113],\n            textColor: 255\n          }\n        });\n        yPos = doc.autoTable.previous.finalY + 15;\n      }\n    });\n  }\n\n  // Save and return as blob\n  const pdfBlob = doc.output('blob');\n  return URL.createObjectURL(pdfBlob);\n};","map":{"version":3,"names":["jsPDF","generateCustomerStatement","customer","transactions","doc","setFontSize","text","name","phone","address","email","Date","toLocaleDateString","totalDue","reduce","sum","t","remainingAmount","setFont","undefined","toFixed","tableColumn","tableRows","map","transaction","paidAmount","amount","createdAt","item","dueDate","autoTable","startY","head","body","theme","headStyles","fillColor","textColor","foot","hasRepayments","some","repayments","length","addPage","yPos","forEach","repaymentColumn","repaymentRows","repayment","date","previous","finalY","pdfBlob","output","URL","createObjectURL"],"sources":["C:/Users/gowth/Downloads/Networth_assignment/credi-khaata/src/utils/pdfUtils.js"],"sourcesContent":["import jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\n\r\nexport const generateCustomerStatement = (customer, transactions) => {\r\n  // Create a new PDF document\r\n  const doc = new jsPDF();\r\n  \r\n  // Add title\r\n  doc.setFontSize(20);\r\n  doc.text(`${customer.name} - Statement`, 14, 22);\r\n  \r\n  // Add customer details\r\n  doc.setFontSize(12);\r\n  doc.text(`Phone: ${customer.phone}`, 14, 32);\r\n  doc.text(`Address: ${customer.address}`, 14, 38);\r\n  doc.text(`Email: ${customer.email}`, 14, 44);\r\n  doc.text(`Date: ${new Date().toLocaleDateString()}`, 14, 50);\r\n  \r\n  // Calculate total due\r\n  const totalDue = transactions.reduce((sum, t) => sum + t.remainingAmount, 0);\r\n  doc.setFont(undefined, 'bold');\r\n  doc.text(`Total Outstanding: ₹${totalDue.toFixed(2)}`, 14, 60);\r\n  doc.setFont(undefined, 'normal');\r\n  \r\n  // Add transactions table\r\n  const tableColumn = [\"Date\", \"Item\", \"Amount\", \"Due Date\", \"Paid\", \"Remaining\"];\r\n  \r\n  const tableRows = transactions.map(transaction => {\r\n    const paidAmount = transaction.amount - transaction.remainingAmount;\r\n    return [\r\n      new Date(transaction.createdAt).toLocaleDateString(),\r\n      transaction.item,\r\n      `₹${transaction.amount.toFixed(2)}`,\r\n      new Date(transaction.dueDate).toLocaleDateString(),\r\n      `₹${paidAmount.toFixed(2)}`,\r\n      `₹${transaction.remainingAmount.toFixed(2)}`,\r\n    ];\r\n  });\r\n  \r\n  doc.autoTable({\r\n    startY: 70,\r\n    head: [tableColumn],\r\n    body: tableRows,\r\n    theme: 'striped',\r\n    headStyles: { fillColor: [41, 128, 185], textColor: 255 },\r\n    foot: [['', '', '', 'Total', `₹${totalDue.toFixed(2)}`]],\r\n  });\r\n  \r\n  // Add repayments table if there are any\r\n  const hasRepayments = transactions.some(t => t.repayments && t.repayments.length > 0);\r\n  \r\n  if (hasRepayments) {\r\n    doc.addPage();\r\n    doc.setFontSize(16);\r\n    doc.text(`${customer.name} - Repayment History`, 14, 20);\r\n    \r\n    let yPos = 30;\r\n    \r\n    transactions.forEach(transaction => {\r\n      if (transaction.repayments && transaction.repayments.length > 0) {\r\n        doc.setFontSize(14);\r\n        doc.text(`Item: ${transaction.item} (₹${transaction.amount.toFixed(2)})`, 14, yPos);\r\n        yPos += 10;\r\n        \r\n        const repaymentColumn = [\"Date\", \"Amount\"];\r\n        const repaymentRows = transaction.repayments.map(repayment => [\r\n          new Date(repayment.date).toLocaleDateString(),\r\n          `₹${repayment.amount.toFixed(2)}`,\r\n        ]);\r\n        \r\n        doc.autoTable({\r\n          startY: yPos,\r\n          head: [repaymentColumn],\r\n          body: repaymentRows,\r\n          theme: 'grid',\r\n          headStyles: { fillColor: [46, 204, 113], textColor: 255 },\r\n        });\r\n        \r\n        yPos = doc.autoTable.previous.finalY + 15;\r\n      }\r\n    });\r\n  }\r\n  \r\n  // Save and return as blob\r\n  const pdfBlob = doc.output('blob');\r\n  return URL.createObjectURL(pdfBlob);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}